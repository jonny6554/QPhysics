e%{
%    The folowing is the object representing the window containing the
%    images generated by the program. 
%
%    Errors thrown:
%        By constructor: InvalidPositionValues, InvalidLengthValues
%}

classdef SLMFigure < handle
    properties (SetAccess = private)
        x; %x coordinate of window
        y; %y coordinate of window
        xlength; %Length of the window on the x axis.
        ylength; %Length of the windnow on the y axis.
        windowNumber; %Unique identifier of the current window.
        window; %The figure of the current object.
    end
    properties (Constant)
       ScreenSize = get(0, 'Screensize') 
    end
    methods
        %Constructor of the figure (Throws InvalidPositionValues and InvalidLengthValues)
        function fig = SLMFigure(figNumber, length, width)
            %Verifying that the length values entered are valid.
            if (isscalar(length) && isnumeric(length) && isscalar (width) &&isnumeric(width))
                fig.ylength = width;
                fig.xlength = length;
            else
                errorStruct.message = 'Length of window entered was not a scalar value but rather xlength: ' + class(length) +' and ' + class(width) +'!';
                errorStruct.identifier = 'Figure:InvalidLengthValues';
                error(errorStruct);
            end
            %Verifying that the figure number entered is valid.
            if (isscalar(figNumber) && isnumeric(figNumber))
                fig.windowNumber = figNumber;
            else
                errorStruct.message = ' figure number of the window entered was not a scalar value but rather a ' + class(figNumber) +'!';
                errorStruct.identifier = 'SLMFigure:InvalidFigureNumber';
                error(errorStruct);
            end
            initialCoordinates = [150, fig.ScreenSize(4)-(fig.xlength+100)];
            %Creating the figure
            fig.window = figure(fig.windowNumber);
            set(fig.window,'menubar','none','units','pixels');
            set(fig.window,'Position',[initialCoordinates,fig.xlength,fig.ylength]); %Figure appears at initial coordinates
            set(gcf,'Resize','off'); % Disable resizing 
            set(gcf,'BackingStore','on'); %For fast drawing of the figure's contents
        end

        function closeWindow(object)%gcf is the current figure handle.
            delete(object);
        end
        
        %Setter for the x value.
        function fig = setx(fig,x)
            if (isscalar(x) && isnumeric(x))
                fig.x = x;
                set(gcf,'Position', [fig.x,fig.y,fig.xlength,fig.ylength])
            end
        end
        
        %Setter for the y value.
        function fig = sety(fig,y)
            if (isscalar(y) && isnumeric(y))
                fig.y = y;
                set(gcf, 'Position', [fig.x,fig.y,fig.xlength,fig.ylength])
            end
        end
        
        %Getter for the x value.
        function value = getx(obj)
            value=obj.x;
        end
        
        %Getter for the y value.
        function value = gety(obj)
            value=obj.y;
        end
        
        %Returns wether or wether not it is the current active window.
        function result = isCurrentlyActive(object)
           if (object.window == gcf) 
              result = 1;
           else
              result = 0;
           end
        end
        
        %{
            Deletes the current object. It does not delete the variable
            from the workspace.
        %}
        function destroy(object)
            delete(object.window);
        end
    end
end